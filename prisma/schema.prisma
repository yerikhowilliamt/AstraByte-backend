// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum ProductStatus {
  ACTIVE
  FEATURED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model User {
  id                  Int         @id                  @default(autoincrement())
  name                String                           @db.VarChar(100)
  email               String      @unique              @db.VarChar(100)
  emailVerified       DateTime?                        @map("email_verified")
  password            String?                          @db.VarChar(100)
  refreshToken        String?     @db.Text             @map("refresh_token")
  image               String?
  role                UserRole    @default(CUSTOMER)

  createdAt           DateTime    @default(now())      @map("created_at")
  updatedAt           DateTime    @updatedAt           @map("updated_at")

  accounts            Account[]
  contacts            Contact[]
  addresses           Address[]
  stores              Store[]
  orders              Order[]

  @@map("users")
}

model Account {
  id                  Int         @id               @default(autoincrement())
  userId              Int                           @map("user_id")
  provider            String
  providerAccountId   String      @unique           @map("provider_account_id")
  refreshToken        String?     @db.Text          @map("refresh_token")

  createdAt           DateTime    @default(now())   @map("created_at")
  updatedAt           DateTime    @updatedAt        @map("updated_at")
 
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@index([userId])
  @@index([providerAccountId])
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Contact {
  id                  Int         @id                @default(autoincrement())
  userId              Int                            @map("user_id")
  phone               String      @unique            @db.VarChar(20)

  createdAt           DateTime    @default(now())    @map("created_at")
  updatedAt           DateTime    @updatedAt         @map("updated_at")

  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("contacts")
}

model Address {
  id                  Int         @id                @default(autoincrement())
  userId              Int                            @map("user_id")
  street              String      @db.VarChar(255)   
  city                String      @db.VarChar(100)
  province            String      @db.VarChar(100)
  country             String      @db.VarChar(100)
  postalCode          String      @db.VarChar(10)    @map("postal_code")
  isPrimary           Boolean     @default(false)    @map("is_primary")

  createdAt           DateTime    @default(now())    @map("created_at")
  updatedAt           DateTime    @updatedAt         @map("updated_at")

  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, street])
  @@unique([userId, street, city, province, country, postalCode])
  @@map("addresses")
}

model Store {
  id                  Int         @id                @default(autoincrement())
  userId              Int                            @map("user_id")
  name                String      @unique            @db.VarChar(100)

  createdAt           DateTime    @default(now())    @map("created_at")
  updatedAt           DateTime    @updatedAt         @map("updated_at")

  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  banners             Banner[]
  categories          Category[]
  colors              Color[]
  brands              Brand[]
  products            Product[]
  orders              Order[]

  @@index([userId])
  @@map("stores")
}

model Banner {
  id                  Int         @id                @default(autoincrement())
  storeId             Int                            @map("store_id")
  publicId            String                         @map("public_id")
  name                String
  imageUrl            String

  createdAt           DateTime    @default(now())    @map("created_at")
  updatedAt           DateTime    @updatedAt         @map("updated_at")

  store               Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  @@index([storeId])
  @@index([publicId])
  @@unique([storeId, name])
  @@map("banners")
}

model Category {
  id                  Int         @id                @default(autoincrement())
  storeId             Int                            @map("store_id")
  name                String      @unique            @db.VarChar(100)
  
  createdAt           DateTime    @default(now())    @map("created_at")
  updatedAt           DateTime    @updatedAt         @map("updated_at")

  store               Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  products            Product[]
  
  @@index([storeId])
  @@map("categories")
}

model Color {
  id                  Int         @id                @default(autoincrement())
  storeId             Int                            @map("store_id")
  name                String      @unique
  value               String      @unique
  
  createdAt           DateTime    @default(now())    @map("created_at")
  updatedAt           DateTime    @updatedAt         @map("updated_at")

  store               Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  products            Product[]
  
  @@index([storeId])
  @@map("colors")
}

model Brand {
  id                  Int         @id                @default(autoincrement())
  storeId             Int                            @map("store_id")
  name                String      @unique            @db.VarChar(100)

  createdAt           DateTime    @default(now())    @map("created_at")
  updatedAt           DateTime    @updatedAt         @map("updated_at")

  store               Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  products            Product[]
  @@index([storeId, name])
  @@map("brands")
}

model Product {
  id                  Int              @id                @default(autoincrement())
  storeId             Int                                 @map("store_id")
  categoryId          Int                                 @map("category_id")
  colorId             Int                                 @map("color_id")
  brandId             Int                                 @map("brand_id")
  name                String
  price               Decimal         @db.Decimal(10,2)
  description         String          @db.Text()
  status              ProductStatus   @default(ACTIVE)
  stockQuantity       Int             @default(0)
  
  createdAt           DateTime        @default(now())     @map("created_at")
  updatedAt           DateTime        @updatedAt          @map("updated_at")

  store               Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category            Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  color               Color           @relation(fields: [colorId], references: [id], onDelete: Cascade)
  brand               Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)

  orderItems          OrderItem[]
  
  @@index([storeId])
  @@index([categoryId])
  @@index([colorId])
  @@index([name])
  @@index([price])
  @@index([name, storeId])
  @@index([storeId, brandId])
  @@index([name, brandId])
  @@index([name, categoryId])
  @@index([name, price, createdAt])
  @@index([name, price, colorId])
  @@index([name, price, colorId, createdAt])

  @@map("products")
}

model Order {
  id              Int             @id @default(autoincrement())
  storeId         Int             @map("store_id")
  userId          Int             @map("user_id")
  totalAmount     Decimal         @db.Decimal(10,2)
  status          OrderStatus     @default(PENDING)
  createdAt       DateTime        @default(now())  @map("created_at")
  updatedAt       DateTime        @updatedAt       @map("updated_at")

  store           Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@index([storeId])
  @@index([userId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id              Int             @id @default(autoincrement())
  orderId         Int             @map("order_id")
  productId       Int             @map("product_id")
  quantity        Int             @default(1)
  price           Decimal         @db.Decimal(10,2)

  order           Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product         Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}
